"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IPBlockedError = void 0;
const ipaddr_js_1 = __importStar(require("ipaddr.js"));
function parse(item) {
    try {
        if (item.indexOf('/') !== -1) {
            return (0, ipaddr_js_1.parseCIDR)(item);
        }
        const addr = ipaddr_js_1.default.process(item);
        return [addr, addr.kind() === 'ipv4' ? 32 : 128];
    }
    catch (e) {
        return null;
    }
}
function matchIP(ip, list) {
    return list.some((item) => ip.kind() === item[0].kind() && ip.match(item));
}
class IPBlockedError extends Error {
    constructor(message, ip) {
        super(message);
        this.ip = ip;
    }
}
exports.IPBlockedError = IPBlockedError;
function default_1(options) {
    const allow = (options.allow || []).map(parse).filter(Boolean);
    const deny = (options.deny || []).map(parse).filter(Boolean);
    return function (req, res, next) {
        const ip = options.ipOverride ? options.ipOverride(req) : req.ip;
        if (!(0, ipaddr_js_1.isValid)(ip)) {
            next(new Error(`IP Address ${ip} is not valid`));
            return;
        }
        const addr = ipaddr_js_1.default.process(ip);
        const allowed = matchIP(addr, allow);
        const denied = matchIP(addr, deny);
        /*
            ALLOW if:
                - mode is whitelist AND ip is allowed AND ip is NOT denied
                - mode is blacklist AND ip is allowed
                - mode is blacklist AND ip is NOT denied
        */
        const error = (allowed && !denied) || (options.mode === 'blacklist' && (allowed || !denied))
            ? undefined
            : new IPBlockedError('Access denied', ip);
        next(error);
    };
}
exports.default = default_1;
//# sourceMappingURL=index.js.map